{
  "code": "<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\n\n\n\n\n\nconst count = ref(0)\n\nconst double = computed(() => count.value * 2)\n</script>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      msg: 'Hello!'\n    }\n  },\n  methods: {\n    greet() {\n      console.log(this.msg)\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">{{ msg }} Count is: {{ count }}</button>\n</template>\n",
  "nodes": [
    {
      "type": "hover",
      "text": "(alias) function ref<T>(value: T): Ref<UnwrapRef<T>> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 34,
      "length": 3,
      "target": "ref",
      "line": 1,
      "character": 9
    },
    {
      "type": "hover",
      "text": "(alias) const computed: {\n    <T>(getter: ComputedGetter<T>, debugOptions?: DebuggerOptions | undefined): ComputedRef<T>;\n    <T>(options: WritableComputedOptions<T>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<...>;\n}\nimport computed",
      "start": 39,
      "length": 8,
      "target": "computed",
      "line": 1,
      "character": 14
    },
    {
      "type": "query",
      "text": "(alias) const computed: {\n    <T>(getter: ComputedGetter<T>, debugOptions?: DebuggerOptions | undefined): ComputedRef<T>;\n    <T>(options: WritableComputedOptions<T>, debugOptions?: DebuggerOptions | undefined): WritableComputedRef<...>;\n}\nimport computed",
      "start": 39,
      "length": 8,
      "target": "computed",
      "line": 1,
      "character": 14
    },
    {
      "type": "hover",
      "text": "const count: Ref<number>",
      "start": 72,
      "length": 5,
      "target": "count",
      "line": 7,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(alias) ref<number>(value: number): Ref<number> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 80,
      "length": 3,
      "target": "ref",
      "line": 7,
      "character": 14
    },
    {
      "type": "hover",
      "text": "const double: ComputedRef<number>",
      "start": 94,
      "length": 6,
      "target": "double",
      "line": 9,
      "character": 6
    },
    {
      "type": "query",
      "text": "const double: ComputedRef<number>",
      "start": 94,
      "length": 6,
      "target": "double",
      "line": 9,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(alias) computed<number>(getter: ComputedGetter<number>, debugOptions?: DebuggerOptions | undefined): ComputedRef<number> (+1 overload)\nimport computed",
      "docs": "Takes a getter function and returns a readonly reactive ref object for the\nreturned value from the getter. It can also take an object with get and set\nfunctions to create a writable ref object.",
      "tags": [
        [
          "example",
          "```js\n// Creating a readonly computed ref:\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\nplusOne.value++ // error\n```\n\n```js\n// Creating a writable computed ref:\nconst count = ref(1)\nconst plusOne = computed({\n  get: () => count.value + 1,\n  set: (val) => {\n    count.value = val - 1\n  }\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0\n```"
        ],
        [
          "param",
          "getter - Function that produces the next value."
        ],
        [
          "param",
          "debugOptions - For debugging. See {@link https://vuejs.org/guide/extras/reactivity-in-depth.html#computed-debugging}."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#computed}"
        ]
      ],
      "start": 103,
      "length": 8,
      "target": "computed",
      "line": 9,
      "character": 15
    },
    {
      "type": "hover",
      "text": "const count: Ref<number>",
      "start": 118,
      "length": 5,
      "target": "count",
      "line": 9,
      "character": 30
    },
    {
      "type": "hover",
      "text": "(property) Ref<number>.value: number",
      "start": 124,
      "length": 5,
      "target": "value",
      "line": 9,
      "character": 36
    },
    {
      "type": "hover",
      "text": "(property) ComponentOptionsBase<Props, RawBindings, D, C extends ComputedOptions, M extends MethodOptions, Mixin extends ComponentOptionsMixin, Extends extends ComponentOptionsMixin, E extends EmitsOptions, EE extends string = string, Defaults = {}, I extends ComponentInjectOptions = {}, II extends string = string, S extends SlotsType<...> = {}>.name?: string | undefined",
      "start": 174,
      "length": 4,
      "target": "name",
      "line": 14,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(property) LegacyOptions<{}, { msg: string; }, {}, { greet(): void; }, ComponentOptionsMixin, ComponentOptionsMixin, {}, string>.data?: ((this: CreateComponentPublicInstance<...>, vm: CreateComponentPublicInstance<{}, {}, {}, {}, MethodOptions, ComponentOptionsMixin, ComponentOptionsMixin, {}, {}, {}, false, ... 8 more ..., {}>) => {\n    ...;\n}) | undefined",
      "start": 196,
      "length": 4,
      "target": "data",
      "line": 15,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 224,
      "length": 3,
      "target": "msg",
      "line": 17,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(property) LegacyOptions<{}, { msg: string; }, {}, { greet(): void; }, ComponentOptionsMixin, ComponentOptionsMixin, {}, string>.methods?: {\n    greet(): void;\n} | undefined",
      "start": 251,
      "length": 7,
      "target": "methods",
      "line": 20,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(method) greet(): void",
      "start": 266,
      "length": 5,
      "target": "greet",
      "line": 21,
      "character": 4
    },
    {
      "type": "hover",
      "text": "var console: Console",
      "start": 282,
      "length": 7,
      "target": "console",
      "line": 22,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(method) Console.log(...data: any[]): void",
      "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log)",
      "start": 290,
      "length": 3,
      "target": "log",
      "line": 22,
      "character": 14
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 299,
      "length": 3,
      "target": "msg",
      "line": 22,
      "character": 23
    },
    {
      "type": "hover",
      "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
      "start": 341,
      "length": 6,
      "target": "button",
      "line": 29,
      "character": 3
    },
    {
      "type": "hover",
      "text": "(property) 'click': ((payload: MouseEvent) => void) | undefined",
      "start": 349,
      "length": 5,
      "target": "click",
      "line": 29,
      "character": 11
    },
    {
      "type": "query",
      "text": "(property) onClick?: ((payload: MouseEvent) => void) | undefined",
      "start": 349,
      "length": 5,
      "target": "click",
      "line": 29,
      "character": 11
    },
    {
      "type": "hover",
      "text": "const count: Ref<number>",
      "start": 356,
      "length": 5,
      "target": "count",
      "line": 29,
      "character": 18
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 368,
      "length": 3,
      "target": "msg",
      "line": 29,
      "character": 30
    },
    {
      "type": "hover",
      "text": "const count: Ref<number>",
      "start": 388,
      "length": 5,
      "target": "count",
      "line": 29,
      "character": 50
    },
    {
      "type": "hover",
      "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
      "start": 398,
      "length": 6,
      "target": "button",
      "line": 29,
      "character": 60
    }
  ],
  "flags": []
}